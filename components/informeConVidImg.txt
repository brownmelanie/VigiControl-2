const Informe = () => {
    const [text, setText] =  useState("");
    const [image, setImage] = useState(null);
    const [video, setVideo] = useState(null);

    useEffect(() => {
        (async () => {
            const { status } = await ImagePicker.requestCameraPermissionsAsync();
            if (status !== 'granted') {
                Alert.alert("Permiso denegado", "Necesitamos acceso a la cámara para esta funcionalidad.");
            }
        })();
    }, []);

    const pickImage = async () => {
        const permissionResult = await ImagePicker.requestCameraPermissionsAsync();
        if (permissionResult.status !== 'granted') {
            Alert.alert("Permiso requerido", "Por favor otorga acceso a la cámara para continuar.");
            return;
        }

        let result = await ImagePicker.launchCameraAsync({
            allowsEditing: true,
            quality: 1,
        });

        if (!result.canceled) {
            setImage(result.assets[0].uri);
        }
    };

    const pickVideo = async () => {
        const permissionResult = await ImagePicker.requestCameraPermissionsAsync();
        if (permissionResult.status !== 'granted') {
            Alert.alert("Permiso requerido", "Por favor otorga acceso a la cámara para continuar.");
            return;
        }

        let result = await ImagePicker.launchCameraAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Videos,
            allowsEditing: true,
            quality: 1,
        });

        if (!result.canceled) {
            setVideo(result.assets[0].uri);
        }
    };

    //Imagen y video se guardan como url temporal y para enviarlos con el reporte se puede enviar como un form-data hacia el servidor con una solicitud HTTP usando fetch

    //logica SUBIDA AL SERVIDOR -------- REVISARRRRR
    const handleSendReport = async () => {
        let formData = new FormData();

        if (image) {
            formData.append("file", {
                uri: image,
                name: "reporte_imagen.jpg",
                type: "image/jpeg",
            });
        }

        if (video) {
            formData.append("file", {
                uri: video,
                name: "reporte_video.mp4",
                type: "video/mp4",
            });
        }
        try {
            const response = await fetch(`${API_URL}/reporte`, {
                method: "POST",
                headers: {
                    "Content-Type": "multipart/form-data",
                },
                body: formData,
            });
    
            const result = await response.json();
    
            if (response.ok) {
                Alert.alert("Éxito", "El reporte se ha procesado correctamente.");
                setImage(null);
                setVideo(null);
                setText("");
            } else {
                throw new Error(result.message || "Error al enviar el reporte");
            }
    
        } catch (error) {
            console.error(error);
            Alert.alert("Error", "Hubo un problema al procesar el reporte. Inténtalo nuevamente.");
        }
    }
    
    return (
        <ImageBackground source={background} style={styles.backgroundImg}>
            <Navbar/>
            <View style={styles.container}>

                <View style={styles.containerTitle}>
                    <Text style={styles.title}>Usted se encuentra cerca de</Text>
                </View>

                <View style={styles.textBox}>
                    <TextInput
                        style={styles.textInput}
                        multiline
                        placeholder="Escriba su reporte aquí..."
                        value={text}
                        onChangeText={setText}
                    />
                </View>

                <View style={styles.buttonContainer}>
                    <TouchableOpacity style={styles.button} onPress={pickImage}>
                        <Text style={styles.buttonText}>Cámara</Text>
                    </TouchableOpacity>
                    <TouchableOpacity style={styles.button} onPress={pickVideo}>
                        <Text style={styles.buttonText}>Video</Text>
                    </TouchableOpacity>
                </View>

                <View style={styles.sendButtonContainer}>
                    <TouchableOpacity style={styles.sendButton} onPress={handleSendReport}>
                        <Text style={styles.sendButtonText}>PROCESAR REPORTE</Text>
                    </TouchableOpacity>
                </View>

            </View>
        </ImageBackground>
    )
}

const styles = StyleSheet.create({
    backgroundImg: {
        flex: 1,
        resizeMode: "cover",
        justifyContent: "center",
        alignItems: "center"
    },
    container: {
        flex: 1,
        width: "100%",
        borderTopColor: "white",
        borderTopWidth: 1,
    },
    containerTitle: {
        borderBottomColor: "rgba(255, 255, 255, 0.7)", 
        borderBottomWidth: 0.5,
        padding: 10,
    },
    title: {
        color: "white",
        textAlign: "center",
        paddingTop: 15,
        fontSize: 18,
    },
    textBox: {
        backgroundColor: 'rgba(255, 255, 255, 0.7)',
        padding: 15,
        margin: 20,
        borderRadius: 3,
        minHeight: "30%"
    },
    textInput: {
        height: 100,
        fontSize: 16,
        color: 'black',
        textAlignVertical: 'top',
    },
    buttonContainer: {
        marginBottom: 20,
        width: '100%',
        flexDirection: 'row',
        justifyContent: 'space-around',
    },
    button: {
        backgroundColor: '#D6D8D7',
        paddingVertical: 20,
        paddingHorizontal: 50,
        borderRadius: 2,
        margin: 10,
        elevation: 3,
    },
    buttonText: {
        color: '#333',
        fontSize: 16,
        fontWeight: 'bold',
    },
    sendButtonContainer: {
        marginLeft: 20,
        marginRight: 20,
    },
    sendButton: {
        backgroundColor: '#D6D8D7',
        paddingVertical: 20,
        paddingHorizontal: 30,
        borderRadius: 2,
    },
    sendButtonText: {
        color: '#333',
        fontSize: 18,
        fontWeight: 'bold',
        textAlign: "center",
    },
})

export default Informe;